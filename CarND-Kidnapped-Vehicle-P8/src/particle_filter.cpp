/*
 * particle_filter.cpp
 *
 *  Created on: Dec 12, 2016
 *      Author: Tiffany Huang
 */

#include <random>
#include <algorithm>
#include <iostream>
#include <numeric>
#include <math.h>
#include <iostream>
#include <sstream>
#include <string>
#include <iterator>

#include "particle_filter.h"

using namespace std;
#define PI 3.14159265

void ParticleFilter::init(double x, double y, double theta, double std[])
{
	// TODO: Set the number of particles. Initialize all particles to first position (based on estimates of
	//   x, y, theta and their uncertainties from GPS) and all weights to 1.
	// Add random Gaussian noise to each particle.
	// NOTE: Consult particle_filter.h for more information about this method (and others in this file).

	// Generators: Ojbects that generate uniformly distributed numbers.
	default_random_engine gen;
	num_particles = 100; 
	Particle sample;

	/*
	Distributions: Objects that transform sequences of numbers generated by a generator
				   into sequences of numbers that follow a specific random variable    
				   distribution, such as uniform, Normal, Gaussian.
	
	This line creates a normal (Gaussian) distribution for x,y,theta
	*/
	normal_distribution<double> dist_x(x, std[0]);
	normal_distribution<double> dist_y(y, std[1]);
	normal_distribution<double> dist_theta(theta, std[2]);

	for (int i = 0; i < this->num_particles; i++)
	{
		sample.id = i;
		sample.x = dist_x(gen);
		sample.y = dist_y(gen);
		sample.theta = dist_theta(gen);
		sample.weight = 1;
		weights.push_back(1); // vector of weights of all particles
		particles.push_back(sample);
	}

	is_initialized = true; // finish initialization
}

void ParticleFilter::prediction(double delta_t, double std_pos[], double velocity, double yaw_rate)
{
	// TODO: Add measurements to each particle and add random Gaussian noise.
	// NOTE: When adding noise you may find std::normal_distribution and std::default_random_engine useful.

	default_random_engine gen;
	float thresh = 1e-5; 

	// Avoid the case of infinity
	for (int i = 0; i < num_particles; i++)
	{
		double x = particles[i].x;
		double y = particles[i].y;
		double theta = particles[i].theta;
		double x_delta, y_delta, theta_delta;

		if (abs(yaw_rate) > thresh)
		{ // Avoid the case of infinity
			x_delta = velocity / yaw_rate * (sin(theta + yaw_rate * delta_t) - sin(theta));
			y_delta = velocity / yaw_rate * (cos(theta) - cos(theta + yaw_rate * delta_t));
			theta_delta = yaw_rate * delta_t;
		}
		else
		{ 
			x_delta = velocity * cos(theta) * delta_t;
			y_delta = velocity * sin(theta) * delta_t;
			theta_delta = yaw_rate * delta_t;
		}

		// add random gaussian
		normal_distribution<double> dist_x(x + x_delta, std_pos[0]);
		normal_distribution<double> dist_y(y + y_delta, std_pos[1]);
		normal_distribution<double> dist_theta(theta + theta_delta, std_pos[2]);

		// add measurement to each particle
		particles[i].x = dist_x(gen);
		particles[i].y = dist_y(gen);
		particles[i].theta = dist_theta(gen);
	}
}

void ParticleFilter::dataAssociation(std::vector<LandmarkObs> predicted, std::vector<LandmarkObs> &observations)
{
	// TODO: Find the predicted measurement that is closest to each observed measurement and assign the
	//   observed measurement to this particular landmark.
	// NOTE: this method will NOT be called by the grading code. But you will probably find it useful to
	//   implement this method and use it as a helper during the updateWeights phase.

	for (int i = 0; i < observations.size(); i++)
	{
		double min_dist = INFINITY;
		for (int j = 0; j < predicted.size(); j++)
		{
			double distance = dist(observations[i].x, observations[i].y,
								   predicted[j].x, predicted[j].y);
			if (min_dist > distance)
			{
				min_dist = distance;
				observations[i].id = j; 
			}
		}
	}
}

void ParticleFilter::updateWeights(double sensor_range, double std_landmark[],
								   const std::vector<LandmarkObs> &observations, const Map &map_landmarks)
{
	// TODO: Update the weights of each particle using a mult-variate Gaussian distribution. You can read
	//   more about this distribution here: https://en.wikipedia.org/wiki/Multivariate_normal_distribution
	// NOTE: The observations are given in the VEHICLE'S coordinate system. Your particles are located
	//   according to the MAP'S coordinate system. You will need to transform between the two systems.
	//   Keep in mind that this transformation requires both rotation AND translation (but no scaling).
	//   The following is a good resource for the theory:
	//   https://www.willamette.edu/~gorr/classes/GeneralGraphics/Transforms/transforms2d.htm
	//   and the following is a good resource for the actual equation to implement (look at equation
	//   3.33
	//   http://planning.cs.uiuc.edu/node99.html

	// observation measurements in MAP coordinates
	std::vector<LandmarkObs> observations_map;
	// Landmarks within sensor range
	std::vector<LandmarkObs> predicted;
	// update weights for resampling
	weights.clear();

	for (int i = 0; i < num_particles; i++)
	{
		double xp = particles[i].x;
		double yp = particles[i].y;
		double theta_p = particles[i].theta;

		// transformations between Vehicle's and Map coordinates
		observations_map.clear();
		LandmarkObs obs_map;
		for (int j = 0; j < observations.size(); j++)
		{
			double xc = observations[j].x;
			double yc = observations[j].y;

			obs_map.id = observations[j].id;
			obs_map.x = xp + cos(theta_p) * xc - sin(theta_p) * yc;
			obs_map.y = yp + sin(theta_p) * xc + cos(theta_p) * yc;

			observations_map.push_back(obs_map);
		}

		// filter predicted measurement candidates with the sensor range
		predicted.clear();
		LandmarkObs pred_candidate;
		for (int k = 0; k < map_landmarks.landmark_list.size(); k++)
		{
			int id_l = map_landmarks.landmark_list[k].id_i;
			double xl = map_landmarks.landmark_list[k].x_f;
			double yl = map_landmarks.landmark_list[k].y_f;

			if (dist(xp, yp, xl, yl) < sensor_range)
			{
				pred_candidate.id = id_l;
				pred_candidate.x = xl;
				pred_candidate.y = yl;
				predicted.push_back(pred_candidate);
			}
		}
	
		// associate the observations with predicted measurements
		dataAssociation(predicted, observations_map);

		// compute Multivariate-Gaussian Probability for each observation
		double weight_p = 1.;
		for (int n = 0; n < observations_map.size(); n++)
		{
			// define inputs
			double sig_x = std_landmark[0];
			double sig_y = std_landmark[1];
			double x_obs = observations_map[n].x;
			double y_obs = observations_map[n].y;
			int id = observations_map[n].id;
			double mu_x = predicted[id].x;
			double mu_y = predicted[id].y;
			

			// calculate normalization term
			double gauss_norm = 1 / (2 * PI * sig_x * sig_y);

			// calculate exponent
			double exponent = pow((x_obs - mu_x), 2) / (2 * pow(sig_x, 2)) +
							  pow((y_obs - mu_y), 2) / (2 * pow(sig_y, 2));
 
			// calculate weight using normalization terms and exponent
			double weight_obs = gauss_norm * exp(-exponent);

			weight_p *= weight_obs;
		}

		// Particle's Final Weight
		particles[i].weight = weight_p;
		weights.push_back(weight_p);
	}
}

void ParticleFilter::resample()
{
	// TODO: Resample particles with replacement with probability proportional to their weight.
	// NOTE: You may find std::discrete_distribution helpful here.
	//   http://en.cppreference.com/w/cpp/numeric/random/discrete_distribution

	std::vector<Particle> old_particles = particles;
	particles.clear();

	// random seed generater for resampling
	// Note: the third element must be decimal
	double sum = accumulate(weights.begin(), weights.end(), 0.);
	default_random_engine gen;
	uniform_real_distribution<double> u(0, 1);

	for (int i = 0; i < num_particles; i++)
	{
		int index = 0;
		double seed = u(gen) * sum;

		while (seed > weights[index])
		{
			seed -= weights[index];
			index += 1;
		}
		particles.push_back(old_particles[index]);
	}
}

Particle ParticleFilter::SetAssociations(Particle &particle, const std::vector<int> &associations,
										 const std::vector<double> &sense_x, const std::vector<double> &sense_y)
{
	//particle: the particle to assign each listed association, and association's (x,y) world coordinates mapping to
	// associations: The landmark id that goes along with each listed association
	// sense_x: the associations x mapping already converted to world coordinates
	// sense_y: the associations y mapping already converted to world coordinates

	particle.associations = associations;
	particle.sense_x = sense_x;
	particle.sense_y = sense_y;
}

string ParticleFilter::getAssociations(Particle best)
{
	vector<int> v = best.associations;
	stringstream ss;
	copy(v.begin(), v.end(), ostream_iterator<int>(ss, " "));
	string s = ss.str();
	s = s.substr(0, s.length() - 1); // get rid of the trailing space
	return s;
}
string ParticleFilter::getSenseX(Particle best)
{
	vector<double> v = best.sense_x;
	stringstream ss;
	copy(v.begin(), v.end(), ostream_iterator<float>(ss, " "));
	string s = ss.str();
	s = s.substr(0, s.length() - 1); // get rid of the trailing space
	return s;
}
string ParticleFilter::getSenseY(Particle best)
{
	vector<double> v = best.sense_y;
	stringstream ss;
	copy(v.begin(), v.end(), ostream_iterator<float>(ss, " "));
	string s = ss.str();
	s = s.substr(0, s.length() - 1); // get rid of the trailing space
	return s;
}
